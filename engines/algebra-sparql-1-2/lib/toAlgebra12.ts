import { toAlgebra11Builder } from '@traqula/algebra-sparql-1-1';
import type {
  // AccumulateGroupGraphPattern,
  Algebra,
  ContextConfigs,
  // FindAllVariables,
  // generateFreshVar,
  // mapAggregate,
  // recurseGraph,
  // registerContextDefinitions,
  // simplifiedJoin,
  // simplifyPath,
  // translateAggregates,
  // translateBasicGraphPattern,
  // translateBgp,
  // translateBlankNodesToVariables,
  // translateBoundAggregate,
  // translateDatasetClause,
  // translateExpression,
  // translateGraphPattern,
  // translateGraphRef,
  // translateGraphRefDefSpec,
  // translateGraphRefSpecific,
  // translateInlineData,
  // translateInsertDelete,
  // translateNamed,
  // translatePath,
  // translatePathPredicate,
  // translateQuad,
  translateQuery,
  // TranslateSingleUpdate,
  // translateTerm,
  // translateTripleCollection,
  // translateTripleNesting,
  // translateUpdate,
  // translateUpdateGraphLoad,
  // translateUpdateTriplesBlock,
} from '@traqula/algebra-transformations-1-1';
import type { AlgebraContext } from '@traqula/algebra-transformations-1-2';
import {
  createAlgebraContext,
  inScopeVariables,
  translateTerm12,
  translateTripleCollection12,
  translateTripleNesting12,
} from '@traqula/algebra-transformations-1-2';
import { IndirBuilder } from '@traqula/core';
import type { SparqlQuery } from '@traqula/rules-sparql-1-2';

export const toAlgebra12Builder = IndirBuilder
  .create(toAlgebra11Builder)
  .widenContext<AlgebraContext>()
  .patchRule(translateTerm12)
  .patchRule(translateTripleCollection12)
  .patchRule(translateTripleNesting12)
  .patchRule(inScopeVariables)
  .typePatch<{
    // // Aggregate
    // [translateAggregates.name]: [any, [any]];
    // [mapAggregate.name]: [any, [any]];
    // [translateBoundAggregate.name]: [any, [any]];
    // // General
    // [translateNamed.name]: [any, [any]];
    // [translateTerm.name]: [any, [any]];
    // [registerContextDefinitions.name]: [any, [any]];
    // [translateInlineData.name]: [any, [any]];
    // [translateDatasetClause.name]: [any, [any]];
    // [translateBlankNodesToVariables.name]: [any, [any]];
    // [findAllVariables.name]: [any, [any]];
    // [inScopeVariables.name]: [any, [any]];
    // [generateFreshVar.name]: [any, [any]];
    // // Path
    // [translatePath.name]: [any, [any]];
    // [translatePathPredicate.name]: [any, [any]];
    // [simplifyPath.name]: [any, [any]];
    // // Patterns
    // [translateExpression.name]: [any, [any]];
    // [translateGraphPattern.name]: [any, [any]];
    // [translateBgp.name]: [any, [any]];
    // [accumulateGroupGraphPattern.name]: [any, [any]];
    // [simplifiedJoin.name]: [any, [any]];
    // // TripleAndQuad
    // [translateTripleCollection.name]: [any, [any]];
    // [translateBasicGraphPattern.name]: [any, [any]];
    // [translateTripleNesting.name]: [any, [any]];
    // [recurseGraph.name]: [any, [any]];
    // [translateQuad.name]: [any, [any]];
    // // Updates
    // [translateUpdate.name]: [any, [any]];
    // [translateSingleUpdate.name]: [any, [any]];
    // [translateInsertDelete.name]: [any, [any]];
    // [translateUpdateTriplesBlock.name]: [any, [any]];
    // [translateGraphRefSpecific.name]: [any, [any]];
    // [translateGraphRefDefSpec.name]: [any, [any]];
    // [translateGraphRef.name]: [any, [any]];
    // [translateUpdateGraphLoad.name]: [any, [any]];
    // ToAlgebra
    [translateQuery.name]: [Algebra.Operation, [SparqlQuery, boolean | undefined, boolean | undefined]];
  }>();

/**
 * Translates the given SPARQL query to SPARQL Algebra.
 * @param query - sparql AST generated by Traqula
 * @param options - Optional options object. Current options:
 * @param options.dataFactory - The Datafactory used to generate terms. Default @rdfjs/data-model.
 * @param options.quads - Boolean indicating whether triples should be converted to Quads
 *        (consumes GRAPH statements). Default false.
 * @param options.prefixes - Pre-defined prefixes for the given query. Default empty.
 * @param options.baseIRI - Base IRI that should be used for the query.
 *        Default undefined (throws error if required).
 * @param options.blankToVariable - translate all blank nodes into variables
 * @returns Operation
 */
export function toAlgebra(query: SparqlQuery, options: ContextConfigs = {}): Algebra.Operation {
  const c = createAlgebraContext(options);
  const transformer = toAlgebra12Builder.build();
  return transformer.translateQuery(c, query, options.quads, options.blankToVariable);
}
